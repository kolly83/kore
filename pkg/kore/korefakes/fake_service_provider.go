// Code generated by counterfeiter. DO NOT EDIT.
package korefakes

import (
	"sync"

	v1 "github.com/appvia/kore/pkg/apis/services/v1"
	"github.com/appvia/kore/pkg/kore"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"
)

type FakeServiceProvider struct {
	AdminServicesStub        func() []v1.Service
	adminServicesMutex       sync.RWMutex
	adminServicesArgsForCall []struct {
	}
	adminServicesReturns struct {
		result1 []v1.Service
	}
	adminServicesReturnsOnCall map[int]struct {
		result1 []v1.Service
	}
	CatalogStub        func(kore.Context, *v1.ServiceProvider) (kore.ServiceProviderCatalog, error)
	catalogMutex       sync.RWMutex
	catalogArgsForCall []struct {
		arg1 kore.Context
		arg2 *v1.ServiceProvider
	}
	catalogReturns struct {
		result1 kore.ServiceProviderCatalog
		result2 error
	}
	catalogReturnsOnCall map[int]struct {
		result1 kore.ServiceProviderCatalog
		result2 error
	}
	DeleteStub        func(kore.Context, *v1.Service) (reconcile.Result, error)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 kore.Context
		arg2 *v1.Service
	}
	deleteReturns struct {
		result1 reconcile.Result
		result2 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 reconcile.Result
		result2 error
	}
	DeleteCredentialsStub        func(kore.Context, *v1.Service, *v1.ServiceCredentials) (reconcile.Result, error)
	deleteCredentialsMutex       sync.RWMutex
	deleteCredentialsArgsForCall []struct {
		arg1 kore.Context
		arg2 *v1.Service
		arg3 *v1.ServiceCredentials
	}
	deleteCredentialsReturns struct {
		result1 reconcile.Result
		result2 error
	}
	deleteCredentialsReturnsOnCall map[int]struct {
		result1 reconcile.Result
		result2 error
	}
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct {
	}
	nameReturns struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	ReconcileStub        func(kore.Context, *v1.Service) (reconcile.Result, error)
	reconcileMutex       sync.RWMutex
	reconcileArgsForCall []struct {
		arg1 kore.Context
		arg2 *v1.Service
	}
	reconcileReturns struct {
		result1 reconcile.Result
		result2 error
	}
	reconcileReturnsOnCall map[int]struct {
		result1 reconcile.Result
		result2 error
	}
	ReconcileCredentialsStub        func(kore.Context, *v1.Service, *v1.ServiceCredentials) (reconcile.Result, map[string]string, error)
	reconcileCredentialsMutex       sync.RWMutex
	reconcileCredentialsArgsForCall []struct {
		arg1 kore.Context
		arg2 *v1.Service
		arg3 *v1.ServiceCredentials
	}
	reconcileCredentialsReturns struct {
		result1 reconcile.Result
		result2 map[string]string
		result3 error
	}
	reconcileCredentialsReturnsOnCall map[int]struct {
		result1 reconcile.Result
		result2 map[string]string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceProvider) AdminServices() []v1.Service {
	fake.adminServicesMutex.Lock()
	ret, specificReturn := fake.adminServicesReturnsOnCall[len(fake.adminServicesArgsForCall)]
	fake.adminServicesArgsForCall = append(fake.adminServicesArgsForCall, struct {
	}{})
	fake.recordInvocation("AdminServices", []interface{}{})
	fake.adminServicesMutex.Unlock()
	if fake.AdminServicesStub != nil {
		return fake.AdminServicesStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.adminServicesReturns
	return fakeReturns.result1
}

func (fake *FakeServiceProvider) AdminServicesCallCount() int {
	fake.adminServicesMutex.RLock()
	defer fake.adminServicesMutex.RUnlock()
	return len(fake.adminServicesArgsForCall)
}

func (fake *FakeServiceProvider) AdminServicesCalls(stub func() []v1.Service) {
	fake.adminServicesMutex.Lock()
	defer fake.adminServicesMutex.Unlock()
	fake.AdminServicesStub = stub
}

func (fake *FakeServiceProvider) AdminServicesReturns(result1 []v1.Service) {
	fake.adminServicesMutex.Lock()
	defer fake.adminServicesMutex.Unlock()
	fake.AdminServicesStub = nil
	fake.adminServicesReturns = struct {
		result1 []v1.Service
	}{result1}
}

func (fake *FakeServiceProvider) AdminServicesReturnsOnCall(i int, result1 []v1.Service) {
	fake.adminServicesMutex.Lock()
	defer fake.adminServicesMutex.Unlock()
	fake.AdminServicesStub = nil
	if fake.adminServicesReturnsOnCall == nil {
		fake.adminServicesReturnsOnCall = make(map[int]struct {
			result1 []v1.Service
		})
	}
	fake.adminServicesReturnsOnCall[i] = struct {
		result1 []v1.Service
	}{result1}
}

func (fake *FakeServiceProvider) Catalog(arg1 kore.Context, arg2 *v1.ServiceProvider) (kore.ServiceProviderCatalog, error) {
	fake.catalogMutex.Lock()
	ret, specificReturn := fake.catalogReturnsOnCall[len(fake.catalogArgsForCall)]
	fake.catalogArgsForCall = append(fake.catalogArgsForCall, struct {
		arg1 kore.Context
		arg2 *v1.ServiceProvider
	}{arg1, arg2})
	fake.recordInvocation("Catalog", []interface{}{arg1, arg2})
	fake.catalogMutex.Unlock()
	if fake.CatalogStub != nil {
		return fake.CatalogStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.catalogReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceProvider) CatalogCallCount() int {
	fake.catalogMutex.RLock()
	defer fake.catalogMutex.RUnlock()
	return len(fake.catalogArgsForCall)
}

func (fake *FakeServiceProvider) CatalogCalls(stub func(kore.Context, *v1.ServiceProvider) (kore.ServiceProviderCatalog, error)) {
	fake.catalogMutex.Lock()
	defer fake.catalogMutex.Unlock()
	fake.CatalogStub = stub
}

func (fake *FakeServiceProvider) CatalogArgsForCall(i int) (kore.Context, *v1.ServiceProvider) {
	fake.catalogMutex.RLock()
	defer fake.catalogMutex.RUnlock()
	argsForCall := fake.catalogArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceProvider) CatalogReturns(result1 kore.ServiceProviderCatalog, result2 error) {
	fake.catalogMutex.Lock()
	defer fake.catalogMutex.Unlock()
	fake.CatalogStub = nil
	fake.catalogReturns = struct {
		result1 kore.ServiceProviderCatalog
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceProvider) CatalogReturnsOnCall(i int, result1 kore.ServiceProviderCatalog, result2 error) {
	fake.catalogMutex.Lock()
	defer fake.catalogMutex.Unlock()
	fake.CatalogStub = nil
	if fake.catalogReturnsOnCall == nil {
		fake.catalogReturnsOnCall = make(map[int]struct {
			result1 kore.ServiceProviderCatalog
			result2 error
		})
	}
	fake.catalogReturnsOnCall[i] = struct {
		result1 kore.ServiceProviderCatalog
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceProvider) Delete(arg1 kore.Context, arg2 *v1.Service) (reconcile.Result, error) {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 kore.Context
		arg2 *v1.Service
	}{arg1, arg2})
	fake.recordInvocation("Delete", []interface{}{arg1, arg2})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceProvider) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeServiceProvider) DeleteCalls(stub func(kore.Context, *v1.Service) (reconcile.Result, error)) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeServiceProvider) DeleteArgsForCall(i int) (kore.Context, *v1.Service) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceProvider) DeleteReturns(result1 reconcile.Result, result2 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 reconcile.Result
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceProvider) DeleteReturnsOnCall(i int, result1 reconcile.Result, result2 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 reconcile.Result
			result2 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 reconcile.Result
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceProvider) DeleteCredentials(arg1 kore.Context, arg2 *v1.Service, arg3 *v1.ServiceCredentials) (reconcile.Result, error) {
	fake.deleteCredentialsMutex.Lock()
	ret, specificReturn := fake.deleteCredentialsReturnsOnCall[len(fake.deleteCredentialsArgsForCall)]
	fake.deleteCredentialsArgsForCall = append(fake.deleteCredentialsArgsForCall, struct {
		arg1 kore.Context
		arg2 *v1.Service
		arg3 *v1.ServiceCredentials
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteCredentials", []interface{}{arg1, arg2, arg3})
	fake.deleteCredentialsMutex.Unlock()
	if fake.DeleteCredentialsStub != nil {
		return fake.DeleteCredentialsStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteCredentialsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceProvider) DeleteCredentialsCallCount() int {
	fake.deleteCredentialsMutex.RLock()
	defer fake.deleteCredentialsMutex.RUnlock()
	return len(fake.deleteCredentialsArgsForCall)
}

func (fake *FakeServiceProvider) DeleteCredentialsCalls(stub func(kore.Context, *v1.Service, *v1.ServiceCredentials) (reconcile.Result, error)) {
	fake.deleteCredentialsMutex.Lock()
	defer fake.deleteCredentialsMutex.Unlock()
	fake.DeleteCredentialsStub = stub
}

func (fake *FakeServiceProvider) DeleteCredentialsArgsForCall(i int) (kore.Context, *v1.Service, *v1.ServiceCredentials) {
	fake.deleteCredentialsMutex.RLock()
	defer fake.deleteCredentialsMutex.RUnlock()
	argsForCall := fake.deleteCredentialsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceProvider) DeleteCredentialsReturns(result1 reconcile.Result, result2 error) {
	fake.deleteCredentialsMutex.Lock()
	defer fake.deleteCredentialsMutex.Unlock()
	fake.DeleteCredentialsStub = nil
	fake.deleteCredentialsReturns = struct {
		result1 reconcile.Result
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceProvider) DeleteCredentialsReturnsOnCall(i int, result1 reconcile.Result, result2 error) {
	fake.deleteCredentialsMutex.Lock()
	defer fake.deleteCredentialsMutex.Unlock()
	fake.DeleteCredentialsStub = nil
	if fake.deleteCredentialsReturnsOnCall == nil {
		fake.deleteCredentialsReturnsOnCall = make(map[int]struct {
			result1 reconcile.Result
			result2 error
		})
	}
	fake.deleteCredentialsReturnsOnCall[i] = struct {
		result1 reconcile.Result
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceProvider) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct {
	}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.nameReturns
	return fakeReturns.result1
}

func (fake *FakeServiceProvider) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeServiceProvider) NameCalls(stub func() string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = stub
}

func (fake *FakeServiceProvider) NameReturns(result1 string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeServiceProvider) NameReturnsOnCall(i int, result1 string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeServiceProvider) Reconcile(arg1 kore.Context, arg2 *v1.Service) (reconcile.Result, error) {
	fake.reconcileMutex.Lock()
	ret, specificReturn := fake.reconcileReturnsOnCall[len(fake.reconcileArgsForCall)]
	fake.reconcileArgsForCall = append(fake.reconcileArgsForCall, struct {
		arg1 kore.Context
		arg2 *v1.Service
	}{arg1, arg2})
	fake.recordInvocation("Reconcile", []interface{}{arg1, arg2})
	fake.reconcileMutex.Unlock()
	if fake.ReconcileStub != nil {
		return fake.ReconcileStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.reconcileReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceProvider) ReconcileCallCount() int {
	fake.reconcileMutex.RLock()
	defer fake.reconcileMutex.RUnlock()
	return len(fake.reconcileArgsForCall)
}

func (fake *FakeServiceProvider) ReconcileCalls(stub func(kore.Context, *v1.Service) (reconcile.Result, error)) {
	fake.reconcileMutex.Lock()
	defer fake.reconcileMutex.Unlock()
	fake.ReconcileStub = stub
}

func (fake *FakeServiceProvider) ReconcileArgsForCall(i int) (kore.Context, *v1.Service) {
	fake.reconcileMutex.RLock()
	defer fake.reconcileMutex.RUnlock()
	argsForCall := fake.reconcileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceProvider) ReconcileReturns(result1 reconcile.Result, result2 error) {
	fake.reconcileMutex.Lock()
	defer fake.reconcileMutex.Unlock()
	fake.ReconcileStub = nil
	fake.reconcileReturns = struct {
		result1 reconcile.Result
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceProvider) ReconcileReturnsOnCall(i int, result1 reconcile.Result, result2 error) {
	fake.reconcileMutex.Lock()
	defer fake.reconcileMutex.Unlock()
	fake.ReconcileStub = nil
	if fake.reconcileReturnsOnCall == nil {
		fake.reconcileReturnsOnCall = make(map[int]struct {
			result1 reconcile.Result
			result2 error
		})
	}
	fake.reconcileReturnsOnCall[i] = struct {
		result1 reconcile.Result
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceProvider) ReconcileCredentials(arg1 kore.Context, arg2 *v1.Service, arg3 *v1.ServiceCredentials) (reconcile.Result, map[string]string, error) {
	fake.reconcileCredentialsMutex.Lock()
	ret, specificReturn := fake.reconcileCredentialsReturnsOnCall[len(fake.reconcileCredentialsArgsForCall)]
	fake.reconcileCredentialsArgsForCall = append(fake.reconcileCredentialsArgsForCall, struct {
		arg1 kore.Context
		arg2 *v1.Service
		arg3 *v1.ServiceCredentials
	}{arg1, arg2, arg3})
	fake.recordInvocation("ReconcileCredentials", []interface{}{arg1, arg2, arg3})
	fake.reconcileCredentialsMutex.Unlock()
	if fake.ReconcileCredentialsStub != nil {
		return fake.ReconcileCredentialsStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.reconcileCredentialsReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeServiceProvider) ReconcileCredentialsCallCount() int {
	fake.reconcileCredentialsMutex.RLock()
	defer fake.reconcileCredentialsMutex.RUnlock()
	return len(fake.reconcileCredentialsArgsForCall)
}

func (fake *FakeServiceProvider) ReconcileCredentialsCalls(stub func(kore.Context, *v1.Service, *v1.ServiceCredentials) (reconcile.Result, map[string]string, error)) {
	fake.reconcileCredentialsMutex.Lock()
	defer fake.reconcileCredentialsMutex.Unlock()
	fake.ReconcileCredentialsStub = stub
}

func (fake *FakeServiceProvider) ReconcileCredentialsArgsForCall(i int) (kore.Context, *v1.Service, *v1.ServiceCredentials) {
	fake.reconcileCredentialsMutex.RLock()
	defer fake.reconcileCredentialsMutex.RUnlock()
	argsForCall := fake.reconcileCredentialsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceProvider) ReconcileCredentialsReturns(result1 reconcile.Result, result2 map[string]string, result3 error) {
	fake.reconcileCredentialsMutex.Lock()
	defer fake.reconcileCredentialsMutex.Unlock()
	fake.ReconcileCredentialsStub = nil
	fake.reconcileCredentialsReturns = struct {
		result1 reconcile.Result
		result2 map[string]string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeServiceProvider) ReconcileCredentialsReturnsOnCall(i int, result1 reconcile.Result, result2 map[string]string, result3 error) {
	fake.reconcileCredentialsMutex.Lock()
	defer fake.reconcileCredentialsMutex.Unlock()
	fake.ReconcileCredentialsStub = nil
	if fake.reconcileCredentialsReturnsOnCall == nil {
		fake.reconcileCredentialsReturnsOnCall = make(map[int]struct {
			result1 reconcile.Result
			result2 map[string]string
			result3 error
		})
	}
	fake.reconcileCredentialsReturnsOnCall[i] = struct {
		result1 reconcile.Result
		result2 map[string]string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeServiceProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.adminServicesMutex.RLock()
	defer fake.adminServicesMutex.RUnlock()
	fake.catalogMutex.RLock()
	defer fake.catalogMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.deleteCredentialsMutex.RLock()
	defer fake.deleteCredentialsMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.reconcileMutex.RLock()
	defer fake.reconcileMutex.RUnlock()
	fake.reconcileCredentialsMutex.RLock()
	defer fake.reconcileCredentialsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kore.ServiceProvider = new(FakeServiceProvider)
