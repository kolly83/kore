// Code generated by counterfeiter. DO NOT EDIT.
package korefakes

import (
	"context"
	"sync"

	v1 "github.com/appvia/kore/pkg/apis/services/v1"
	"github.com/appvia/kore/pkg/kore"
)

type FakeServiceCredentials struct {
	DeleteStub        func(context.Context, string) (*v1.ServiceCredentials, error)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	deleteReturns struct {
		result1 *v1.ServiceCredentials
		result2 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 *v1.ServiceCredentials
		result2 error
	}
	GetStub        func(context.Context, string) (*v1.ServiceCredentials, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getReturns struct {
		result1 *v1.ServiceCredentials
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *v1.ServiceCredentials
		result2 error
	}
	GetSchemaStub        func(context.Context, string) (string, error)
	getSchemaMutex       sync.RWMutex
	getSchemaArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getSchemaReturns struct {
		result1 string
		result2 error
	}
	getSchemaReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ListStub        func(context.Context) (*v1.ServiceCredentialsList, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 context.Context
	}
	listReturns struct {
		result1 *v1.ServiceCredentialsList
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 *v1.ServiceCredentialsList
		result2 error
	}
	UpdateStub        func(context.Context, *v1.ServiceCredentials) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.ServiceCredentials
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceCredentials) Delete(arg1 context.Context, arg2 string) (*v1.ServiceCredentials, error) {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Delete", []interface{}{arg1, arg2})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceCredentials) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeServiceCredentials) DeleteCalls(stub func(context.Context, string) (*v1.ServiceCredentials, error)) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeServiceCredentials) DeleteArgsForCall(i int) (context.Context, string) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceCredentials) DeleteReturns(result1 *v1.ServiceCredentials, result2 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 *v1.ServiceCredentials
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceCredentials) DeleteReturnsOnCall(i int, result1 *v1.ServiceCredentials, result2 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 *v1.ServiceCredentials
			result2 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 *v1.ServiceCredentials
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceCredentials) Get(arg1 context.Context, arg2 string) (*v1.ServiceCredentials, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Get", []interface{}{arg1, arg2})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceCredentials) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeServiceCredentials) GetCalls(stub func(context.Context, string) (*v1.ServiceCredentials, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeServiceCredentials) GetArgsForCall(i int) (context.Context, string) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceCredentials) GetReturns(result1 *v1.ServiceCredentials, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *v1.ServiceCredentials
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceCredentials) GetReturnsOnCall(i int, result1 *v1.ServiceCredentials, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *v1.ServiceCredentials
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *v1.ServiceCredentials
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceCredentials) GetSchema(arg1 context.Context, arg2 string) (string, error) {
	fake.getSchemaMutex.Lock()
	ret, specificReturn := fake.getSchemaReturnsOnCall[len(fake.getSchemaArgsForCall)]
	fake.getSchemaArgsForCall = append(fake.getSchemaArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetSchema", []interface{}{arg1, arg2})
	fake.getSchemaMutex.Unlock()
	if fake.GetSchemaStub != nil {
		return fake.GetSchemaStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSchemaReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceCredentials) GetSchemaCallCount() int {
	fake.getSchemaMutex.RLock()
	defer fake.getSchemaMutex.RUnlock()
	return len(fake.getSchemaArgsForCall)
}

func (fake *FakeServiceCredentials) GetSchemaCalls(stub func(context.Context, string) (string, error)) {
	fake.getSchemaMutex.Lock()
	defer fake.getSchemaMutex.Unlock()
	fake.GetSchemaStub = stub
}

func (fake *FakeServiceCredentials) GetSchemaArgsForCall(i int) (context.Context, string) {
	fake.getSchemaMutex.RLock()
	defer fake.getSchemaMutex.RUnlock()
	argsForCall := fake.getSchemaArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceCredentials) GetSchemaReturns(result1 string, result2 error) {
	fake.getSchemaMutex.Lock()
	defer fake.getSchemaMutex.Unlock()
	fake.GetSchemaStub = nil
	fake.getSchemaReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceCredentials) GetSchemaReturnsOnCall(i int, result1 string, result2 error) {
	fake.getSchemaMutex.Lock()
	defer fake.getSchemaMutex.Unlock()
	fake.GetSchemaStub = nil
	if fake.getSchemaReturnsOnCall == nil {
		fake.getSchemaReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getSchemaReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceCredentials) List(arg1 context.Context) (*v1.ServiceCredentialsList, error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("List", []interface{}{arg1})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceCredentials) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeServiceCredentials) ListCalls(stub func(context.Context) (*v1.ServiceCredentialsList, error)) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *FakeServiceCredentials) ListArgsForCall(i int) context.Context {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	argsForCall := fake.listArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceCredentials) ListReturns(result1 *v1.ServiceCredentialsList, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 *v1.ServiceCredentialsList
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceCredentials) ListReturnsOnCall(i int, result1 *v1.ServiceCredentialsList, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 *v1.ServiceCredentialsList
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 *v1.ServiceCredentialsList
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceCredentials) Update(arg1 context.Context, arg2 *v1.ServiceCredentials) error {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.ServiceCredentials
	}{arg1, arg2})
	fake.recordInvocation("Update", []interface{}{arg1, arg2})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.updateReturns
	return fakeReturns.result1
}

func (fake *FakeServiceCredentials) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeServiceCredentials) UpdateCalls(stub func(context.Context, *v1.ServiceCredentials) error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeServiceCredentials) UpdateArgsForCall(i int) (context.Context, *v1.ServiceCredentials) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceCredentials) UpdateReturns(result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceCredentials) UpdateReturnsOnCall(i int, result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceCredentials) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.getSchemaMutex.RLock()
	defer fake.getSchemaMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceCredentials) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kore.ServiceCredentials = new(FakeServiceCredentials)
