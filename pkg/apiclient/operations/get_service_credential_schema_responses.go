// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/appvia/kore/pkg/apiclient/models"
)

// GetServiceCredentialSchemaReader is a Reader for the GetServiceCredentialSchema structure.
type GetServiceCredentialSchemaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetServiceCredentialSchemaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetServiceCredentialSchemaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetServiceCredentialSchemaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetServiceCredentialSchemaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetServiceCredentialSchemaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetServiceCredentialSchemaInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetServiceCredentialSchemaOK creates a GetServiceCredentialSchemaOK with default headers values
func NewGetServiceCredentialSchemaOK() *GetServiceCredentialSchemaOK {
	return &GetServiceCredentialSchemaOK{}
}

/*GetServiceCredentialSchemaOK handles this case with default header values.

Contains the service credential schema definition
*/
type GetServiceCredentialSchemaOK struct {
	Payload models.MapStringInterface
}

func (o *GetServiceCredentialSchemaOK) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/serviceplans/{name}/credentialschema][%d] getServiceCredentialSchemaOK  %+v", 200, o.Payload)
}

func (o *GetServiceCredentialSchemaOK) GetPayload() models.MapStringInterface {
	return o.Payload
}

func (o *GetServiceCredentialSchemaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceCredentialSchemaUnauthorized creates a GetServiceCredentialSchemaUnauthorized with default headers values
func NewGetServiceCredentialSchemaUnauthorized() *GetServiceCredentialSchemaUnauthorized {
	return &GetServiceCredentialSchemaUnauthorized{}
}

/*GetServiceCredentialSchemaUnauthorized handles this case with default header values.

If not authenticated
*/
type GetServiceCredentialSchemaUnauthorized struct {
}

func (o *GetServiceCredentialSchemaUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/serviceplans/{name}/credentialschema][%d] getServiceCredentialSchemaUnauthorized ", 401)
}

func (o *GetServiceCredentialSchemaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetServiceCredentialSchemaForbidden creates a GetServiceCredentialSchemaForbidden with default headers values
func NewGetServiceCredentialSchemaForbidden() *GetServiceCredentialSchemaForbidden {
	return &GetServiceCredentialSchemaForbidden{}
}

/*GetServiceCredentialSchemaForbidden handles this case with default header values.

If authenticated but not authorized
*/
type GetServiceCredentialSchemaForbidden struct {
}

func (o *GetServiceCredentialSchemaForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/serviceplans/{name}/credentialschema][%d] getServiceCredentialSchemaForbidden ", 403)
}

func (o *GetServiceCredentialSchemaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetServiceCredentialSchemaNotFound creates a GetServiceCredentialSchemaNotFound with default headers values
func NewGetServiceCredentialSchemaNotFound() *GetServiceCredentialSchemaNotFound {
	return &GetServiceCredentialSchemaNotFound{}
}

/*GetServiceCredentialSchemaNotFound handles this case with default header values.

the service plan with the given name doesn't exist
*/
type GetServiceCredentialSchemaNotFound struct {
}

func (o *GetServiceCredentialSchemaNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/serviceplans/{name}/credentialschema][%d] getServiceCredentialSchemaNotFound ", 404)
}

func (o *GetServiceCredentialSchemaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetServiceCredentialSchemaInternalServerError creates a GetServiceCredentialSchemaInternalServerError with default headers values
func NewGetServiceCredentialSchemaInternalServerError() *GetServiceCredentialSchemaInternalServerError {
	return &GetServiceCredentialSchemaInternalServerError{}
}

/*GetServiceCredentialSchemaInternalServerError handles this case with default header values.

A generic API error containing the cause of the error
*/
type GetServiceCredentialSchemaInternalServerError struct {
	Payload *models.ApiserverError
}

func (o *GetServiceCredentialSchemaInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/serviceplans/{name}/credentialschema][%d] getServiceCredentialSchemaInternalServerError  %+v", 500, o.Payload)
}

func (o *GetServiceCredentialSchemaInternalServerError) GetPayload() *models.ApiserverError {
	return o.Payload
}

func (o *GetServiceCredentialSchemaInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApiserverError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
